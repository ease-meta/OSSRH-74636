import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.30'
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.7.RELEASE" apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.41" apply false
    id "org.jetbrains.dokka" version "0.9.18"
    id "org.asciidoctor.convert" version "1.5.8"
    id 'org.springframework.boot' version '2.1.6.RELEASE'
}

apply plugin: 'io.spring.dependency-management'
apply from: "config.gradle"

allprojects {
    group = 'com.open.cloud'
    version = '0.0.1-SNAPSHOT'
}
description = "开放式分布式技术栈"

subprojects {

    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.compilerArgs += ["-parameters"]
    }

    jar {
        afterEvaluate {
            manifest {
                attributes 'Implementation-Version': version
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': System.getProperty("user.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())
            }
        }
    }

    license {
        encoding = "UTF-8"
        header = rootProject.file("license.txt")
        includes(["**/*.java", "**/*.kt"])
        exclude "**/*Test.java"
        exclude "**/TableNameParser.java"
        mapping "java", "SLASHSTAR_STYLE"
        mapping "kt", "SLASHSTAR_STYLE"
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://oss.jfrog.org/artifactory/oss-snapshot-local/" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        maven { url "http://repo.maven.apache.org/maven2" }
        jcenter()
    }

    dependencies {
        //compileOnly 'org.projectlombok:lombok'
    }

    dependencyManagement{
        imports {
            //mavenBom 'io.spring.platform:platform-bom:1.1.1.RELEASE'
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "com.alipay.sofa:sofaboot-dependencies:${sofaBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            mavenBom "org.apache.dubbo:dubbo-dependencies-bom:${dubboVersion}"
        }
    }
    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    javadoc {
        afterEvaluate {
            configure(options) {
                encoding "UTF-8"
                charSet 'UTF-8'
                author true
                version true
                failOnError false
                links "http://docs.oracle.com/javase/8/docs/api"
            }
        }
    }

    test {
        dependsOn("cleanTest", "generatePomFileForMavenJavaPublication")
        useJUnitPlatform()
        exclude("**/generator/**")
        exclude("**/postgres/**")
        exclude("**/mysql/**")
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    tasks.whenTaskAdded { task ->
        if (task.name.contains('signMavenJavaPublication')) {
            task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
        }
    }

    publishing {
        repositories {
            maven {
                def userName = System.getProperty("un")
                def passWord = System.getProperty("ps")
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username userName
                    password passWord
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'open-cloud-platform'
                    packaging 'jar'
                    description = 'open-cloud-platform  simplify development.'
                    url = 'https://gitee.com/sloars/open-cloud-platform.git'

                    scm {
                        connection = 'scm:git@gitee.com:sloars/open-cloud-platform.git'
                        developerConnection = 'scm:git@gitee.com:sloars/open-cloud-platform.git'
                        url = 'https://gitee.com/sloars/open-cloud-platform.git'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'leijian'
                            name = '雷建'
                            email = 'leijian0128@163.com'
                        }
                    }

                    withXml {
                        def root = asNode()
                        root.dependencies.'*'.findAll {
                            def d = it
                            d.scope.text() == 'runtime' && project.configurations.findByName("implementation").allDependencies.find { dep ->
                                dep.name == it.artifactId.text()
                            }.each() {
                                d.scope*.value = 'compile'
                                d.appendNode('optional', true)
                            }
                        }
                    }
                }
            }
        }
        signing {
            sign publishing.publications.mavenJava
        }
    }
}
